import Head from 'next/head';
import Navbar from '../components/navbar';
import TaskForm from '../components/formTypes/taskform';
import AssignmentForm from '../components/formTypes/assignmentform';
import BlockForm from '../components/formTypes/blockform';
// import Calendar from '../components/calendar/calendar';
import { useState, useEffect } from 'react';
import { useAppContext } from '../context/items-context'
import EventPopUp from '../components/event-popup';
import { getSession, signIn } from 'next-auth/react'
import * as ical from 'node-ical'
import { format, parseISO, isToday, addWeeks, isBefore } from 'date-fns'
import { v4 as uuidv4 } from 'uuid';
import dynamic from 'next/dynamic'


const Calendar = dynamic(() => import('../components/calendar/calendar'), {
  loading: () => "Loading...",
})


const Home = ({ session, posts, events, settingsProp }) => {

  const [eventType, setEventType] = useState('blocks')
  const [sortType, setSortType] = useState("date");
  const [sortDirection, setSortDirection] = useState("ascending");
  const [initialValues, setInitialValues] = useState({ title: '', description: '', category: '', date: '', duration: '', recurring: '', color: '' })
  const { items, setItems, settings, setSettings } = useAppContext();

  const [calendarLinks, setCalendarLinks] = useState("");

  const types = {
    date: 'date',
    title: 'title',
    category: 'category',
  };

  useEffect(() => {
    if (items!==undefined) {
      const item = items.find(x => x.selected === true)
      setInitialValues(item)
    }
    //console.log(items)
  }, [items]);

  const createItems = (posts, events) => {
    if (posts) {
      const _posts = posts.map(post => post.itemsData.values);
      const _items = _posts.concat(events)
      setItems(_items)
    } 
  }

  useEffect(()=> {
    createItems(posts, events)
  }, [events, posts])

  useEffect(() => {
    setSettings(settingsProp)
  }, [settingsProp])

  

  /* const sortItems = (list) => {
    const sortProperty = types[sortType];
    if (sortDirection === 'ascending') {
      setItems([...list].sort((a, b) => (a[sortProperty] < b[sortProperty]) ? 1 : (a[sortProperty] > b[sortProperty]) ? -1 : 0));
    }
    else {
      setItems([...list].sort((a, b) => (a[sortProperty] < b[sortProperty]) ? -1 : (a[sortProperty] > b[sortProperty]) ? 1 : 0));
    }
  };

  useEffect(() => {
    sortItems(items);
  }, [sortType]); */

  const today = new Date();
  const current_date = today.getFullYear()+"-"+("0"+(today.getMonth()+1)).slice(-2)+"-"+("0"+ today.getDate()).slice(-2);

  /* const reverseItems = () => {
    if ( sortDirection === 'descending' ) setSortDirection('ascending')
    else setSortDirection('descending');
    sortItems(items);
  } */

  
  

  if (session) { return (
    <div>
      <Head>
        <title>Will is a bum</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='bg-white px-10 md:px-20 lg:px-20'>
        <section className='min-h-screen'>
          <Navbar imgSrc={session.user.image}/>
          {/* <ul>
            {
              posts.map((post) => (
                <li key={post.id}>{JSON.stringify(post.itemsData.values)}</li>
              ))
            }
          </ul> */}
          
          
          <div className='relative z-0'>
            <div className="absolute inset-0 flex justify-center items-center z-10 top-0 pointer-events-none">
              {
                items!==undefined && items.length!==0 &&
                items.map(({id, title, subject, description, category, grading, time, date, duration, selected, recurringDays, endTime, location, color }) => (
                  selected &&
                  <EventPopUp key={id} id={id} title={title} subject={subject} description={description} category={category} grading={grading} time={time} date={date} duration={duration} recurringDays={recurringDays} endTime={endTime} location={location} color={color} />
                ))
              }
            </div>
            <Calendar />
          </div>
          <h2>Assignments</h2>
          {
            items.filter(({type}) => type==='assignment').map(({id, title, subject, description, category, grading, time, date, duration, recurringDays, endTime, location, recurring, color }) => (
              <EventPopUp key={id} id={id} title={title} subject={subject} description={description} category={category} grading={grading} time={time} date={date} duration={duration} recurringDays={recurringDays} endTime={endTime} location={location} color={color} />
            ))
          }
            
          
          <form>
            <label className='mb-3 text-gray-600'>Event Type</label>
            <select onChange={(e) => setEventType(e.target.value)} className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-3/4 p-2.5'>
              <option value="tasks">Task</option>
              <option value="assignments">Assignment</option>
              <option value="exams">Exam</option>
              <option value="blocks">Block</option>
            </select>
          </form>
          {
            eventType === 'tasks' && <TaskForm initialValue={initialValues}/>
          }
          {
            eventType === 'blocks' && <BlockForm initialValue={initialValues}/>
          }
          {
            eventType === 'assignments' && <AssignmentForm/>
          }
          
          {/* <div className='w-full shadow-lg rounded-xl px-8 pt-6 pb-8 mb-4 py-10'>
            <div className='flex w-full'>
              <h1 className='text-3xl my-2'>Items</h1>
              <h1 className='align-middle m-4'>Sort By:</h1>
              <select className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-3/4 p-2.5' onChange={(e) => setSortType(e.target.value)}>
                <option value='date'>Due Date</option>
                <option value='title'>Title</option>
                <option value='category'>Category</option>
              </select>
              <button type="button" onClick={reverseItems}>
                {
                  sortDirection === 'ascending' && <TbSortAscending2 />
                }
                {
                  sortDirection === 'descending' && <TbSortDescending2 />
                }
                
              </button>
            </div>
            {
              items.map(({id, title, subject, description, category, grading, time, date, duration }) => (
                <Event key={id} id={id} title={title} subject={subject} description={description} category={category} grading={grading} time={time} date={date} duration={duration}/>
              ))
            }
            
          </div> */}
        </section>
      </main>
    </div>
  )}
  return (    
    <>
      Not signed in <br />
      <button onClick={() => signIn("google")}>Sign in</button>
    </>
 )
}

export const getServerSideProps = async ({req}) => {
  const session = await getSession({ req });
  

  
  if(!session) {
    return {
      redirect: {
        destination: '/api/auth/signin/google',
        permanent: false,
      }
    }
  }

  const user = await prisma.user.findUnique({
    where: { email: session.user.email },
  });
  const posts = await prisma.post.findMany({
    where: {
      user: { id: user.id },
    },
  })

  const settings = await prisma.settings.findUnique({
    where: {
      userId: user.id
    }
  })

  var settingsProp

  if (settings!==null) {
    settingsProp = settings.settingsData.values
  } else {
      settingsProp = {
          calendarStart: "05:00",
          calendarEnd: "22:00",
          calendarIncrements: "60",
          links: []
      }
  }

  var data = []

  
  for (var i = 0; i < settingsProp.links.length; i++) {
    if (settingsProp.links[i] !== '') {
      const linkData = await ical.async.fromURL(settingsProp.links[i]);
      Object.assign(data, linkData)
    }
  }
  var events = []

  const today = new Date()
  
  for (const event of Object.values(data)) {
    if (event.summary !== undefined && event.location!=='' && isBefore(parseISO(event.start.toISOString()), addWeeks(today, 6))) {
      var _event = {}
      _event.id = uuidv4();
      _event.type = 'task';
      _event.selected = false
      _event.title = event.summary
      _event.description = event.description
      _event.location = event.location
      _event.date = event.start.toISOString()
      _event.endTime = event.end.toISOString()
      events.push(_event)
    }
  }

  return {
    props: {
      session,
      posts,
      events,
      settingsProp
    }
  }
}

export default Home;
